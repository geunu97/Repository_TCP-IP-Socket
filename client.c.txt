1. file name - client.c

2. client terminal open 
    -> gcc -o client client.c -lpthread
    -> ./client

3. cmd -> ifconfig -> confirm IP address -> change ip in client.c source

4. code

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <pthread.h>
#include <unistd.h>

static int isThread = 1;
static int sock;

void * ThreadFunction(void * arg){
    char message2[100];
    while(isThread){
if(read(sock, message2, sizeof(message2)-1) == -1){
   printf("read error\n");
   exit(0);
}
printf("msg : %s", message2);

if(strcmp(message2, "exit/n") == 0){
   isThread = 0;
   exit(0);
   }
    }
    printf("end");
    pthread_exit(0);
}

void main(){
    pthread_t tid;
    pthread_attr_t attr;
    pthread_attr_init(&attr);

    struct sockaddr_in serv_addr;
    char message[100];
    int str_len;

    if((sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP))==-1){
printf("socket error\n");
        return;
    }

    memset(&serv_addr, 0, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = inet_addr("192.168.0.162");
    serv_addr.sin_port = htons(23000);

    if(connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1){
printf("connect error\n");
return;
    }

    printf("connected!!\n");

    isThread = 1;
    pthread_create(&tid, &attr, &ThreadFunction, (void *)0);

    while(1){
        fgets(message, sizeof(message), stdin);
        if(strcmp(message, "exit\n")==0){
   isThread = 0;
            break;
        }
        write(sock, message, sizeof(message));
    }

    close(sock);
}